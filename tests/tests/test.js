// Generated by CoffeeScript 1.4.0
(function() {
  var Fiber, require, should;

  if (Meteor.isServer) {
    require = typeof Npm !== "undefined" && Npm !== null ? Npm.require : __meteor_bootstrap__.require;
    Fiber = require('fibers');
  } else {
    Fiber = function(fn) {
      return {
        run: function() {
          return fn();
        }
      };
    };
  }

  should = chai.should();

  describe('TLog class', function() {
    var tl;
    tl = TLog.getLogger();
    if (Meteor.isServer) {
      TLog._clear();
    }
    it('should be visible, have the global logs collection and log http by default', function() {
      TLog.should.exist;
      TLog._global_logs.should.exist;
      return TLog._log_http.should.be["true"];
    });
    it('should return the default logger with correct defaults', function() {
      tl.should.exist;
      tl.should.be.an["instanceof"](TLog);
      tl._currentLogLevel.should.equal(TLog.LOGLEVEL_DEBUG);
      tl._log_user.should.be["true"];
      return tl._printToConsole.should.be["false"];
    });
    return describe('Logging methods:', function() {
      it("should call methods with all log levels", function() {
        var i, m, _i, _j, _len, _len1, _ref, _ref1, _results;
        _ref = ['fatal', 'error', 'warn', 'info', 'verbose', 'debug', 'insaneVerbose'];
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          m = _ref[i];
          tl.should.respondTo(m);
          tl[m]("Logging " + TLog.LOGLEVEL_NAMES[i] + " message", "TESTS");
        }
        _ref1 = ['trace', 'dir'];
        _results = [];
        for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
          m = _ref1[i];
          tl.should.respondTo(m);
          _results.push(tl[m](new Error("Test Error"), "Message for " + m));
        }
        return _results;
      });
      return it('should log the message to the database correctly', function(done) {
        var customOptions, f, obj, rec;
        obj = {
          message: "Logging " + TLog.LOGLEVEL_NAMES[TLog.LOGLEVEL_INFO] + " message",
          full_message: "Logging " + TLog.LOGLEVEL_NAMES[TLog.LOGLEVEL_INFO] + " FULL message",
          module: "TESTS",
          timestamp: new Date,
          isServer: Meteor.isServer
        };
        customOptions = {
          cust1: "cust1",
          cust2: 10
        };
        rec = null;
        f = new Fiber(function() {
          return tl._lowLevelLog(TLog.LOGLEVEL_INFO, obj, customOptions, function(err, id) {
            if (err) {
              throw err;
            }
            rec = TLog._global_logs.findOne(id);
            rec.should.exist;
            obj.message.should.equal(rec.message);
            obj.full_message.should.equal(rec.full_message);
            obj.module.should.equal(rec.module);
            obj.timestamp.should.eql(rec.timestamp);
            obj.isServer.should.equal(rec.isServer);
            rec.customOptions.should.deep.equal(customOptions);
            return done();
          });
        });
        return f.run();
      });
    });
  });

}).call(this);
